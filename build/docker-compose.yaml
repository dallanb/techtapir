version: '3.2'
services:
  account:
    container_name: account
    build:
      context: ${HUNCHO_DIR}/services/account
      dockerfile: ${HUNCHO_DIR}/services/account/build/Dockerfile
    restart: on-failure
    volumes:
      - ${HUNCHO_DIR}/services/account/migrations:/home/app/migrations
      - ${HUNCHO_DIR}/services/account/bin:/home/app/bin
      - ${HUNCHO_DIR}/services/account/tests:/home/app/tests
      - ${HUNCHO_DIR}/services/account/seeds:/home/app/seeds
      - ${HUNCHO_DIR}/services/account/src:/home/app/src
      - ${HUNCHO_DIR}/services/account/statics:/home/app/statics
      - ${HUNCHO_DIR}/services/account/manage.py:/home/app/manage.py
      - ${HUNCHO_DIR}/services/account/setup.py:/home/app/setup.py
    env_file:
      - ${HUNCHO_DIR}/env/dev/.env.account
      - ${HUNCHO_DIR}/secrets/s3/credentials.txt
    healthcheck:
      test: curl --fail -s account:5000/ping || exit 1
      interval: 60s
      timeout: 5s
      retries: 5
    depends_on:
#      - account_cache
      - account_db
    networks:
      - app-net
      - kong-net
#  account_cache:
#    container_name: account_cache
#    build:
#      context: ${HUNCHO_DIR}/services/redis
#      dockerfile: ${HUNCHO_DIR}/services/redis/build/Dockerfile
#    restart: unless-stopped
#    volumes:
#      - ${HUNCHO_DIR}/data/dev/account_cache/redis_data:/var/lib/redis
#      - ${HUNCHO_DIR}/data/dev/account_cache/redis.conf:/usr/local/etc/redis/redis.conf
#    env_file:
#      - ${HUNCHO_DIR}/env/dev/.env.account_cache
#    healthcheck:
#      test: ["CMD", "redis-cli","ping"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#    networks:
#      - app-net
  account_db:
    container_name: account_db
    build:
      context: ${HUNCHO_DIR}/services/postgresql
      dockerfile: ${HUNCHO_DIR}/services/postgresql/build/Dockerfile
      args:
        POSTGRES_VERSION: 9.6
    volumes:
      - ${HUNCHO_DIR}/data/dev/account_db/data:/var/lib/postgresql/data/
    env_file:
      - ${HUNCHO_DIR}/env/dev/.env.account_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U account"]
      interval: 10s
      timeout: 5s
      retries: 20
    networks:
      - app-net
#  account_proxy:
#    container_name: account_proxy
#    build:
#      context: ${HUNCHO_DIR}/services/account/proxy
#      dockerfile: ${HUNCHO_DIR}/services/account/proxy/build/Dockerfile
#    restart: on-failure
#    volumes:
#      - ${HUNCHO_DIR}/services/account/statics/.:/usr/share/nginx/
#    depends_on:
#      - account
#    networks:
#      - app-net
  adminer:
    container_name: adminer
    build:
      context: ${HUNCHO_DIR}/services/adminer
      dockerfile: ${HUNCHO_DIR}/services/adminer/build/Dockerfile
    restart: always
    ports:
      - 8080:8080
    networks:
      - app-net
  auth:
    container_name: auth
    build:
      context: ${HUNCHO_DIR}/services/auth
      dockerfile: ${HUNCHO_DIR}/services/auth/build/Dockerfile
    restart: on-failure
    volumes:
      - ${HUNCHO_DIR}/services/auth/src:/home/app/src
      - ${HUNCHO_DIR}/services/auth/migrations:/home/app/migrations
      - ${HUNCHO_DIR}/services/auth/bin:/home/app/bin
      - ${HUNCHO_DIR}/services/auth/tests:/home/app/tests
      - ${HUNCHO_DIR}/services/auth/manage.py:/home/app/manage.py
    env_file:
      - ${HUNCHO_DIR}/env/dev/.env.auth
    healthcheck:
      test: curl --fail -s auth:5000/ping || exit 1
      interval: 60s
      timeout: 5s
      retries: 5
    depends_on:
#      - auth_cache
      - auth_db
    networks:
      - kong-net
      - app-net
#  auth_cache:
#    container_name: auth_cache
#    build:
#      context: ${HUNCHO_DIR}/services/redis
#      dockerfile: ${HUNCHO_DIR}/services/redis/build/Dockerfile
#    restart: unless-stopped
#    volumes:
#      - ${HUNCHO_DIR}/data/dev/auth_cache/redis_data:/var/lib/redis
#      - ${HUNCHO_DIR}/data/dev/auth_cache/redis.conf:/usr/local/etc/redis/redis.conf
#    env_file:
#      - ${HUNCHO_DIR}/env/dev/.env.auth_cache
#    healthcheck:
#      test: ["CMD", "redis-cli","ping"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#    networks:
#      - app-net
  auth_db:
    container_name: auth_db
    build:
      context: ${HUNCHO_DIR}/services/postgresql
      dockerfile: ${HUNCHO_DIR}/services/postgresql/build/Dockerfile
      args:
        POSTGRES_VERSION: $POSTGRES_VERSION
    volumes:
      - ${HUNCHO_DIR}/data/dev/auth_db/data:/var/lib/postgresql/data/
    env_file:
      - ${HUNCHO_DIR}/env/dev/.env.auth_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U auth"]
      interval: 10s
      timeout: 5s
      retries: 20
    networks:
      - app-net
  auth_proxy:
    container_name: auth_proxy
    build:
      context: ${HUNCHO_DIR}/services/auth/proxy
      dockerfile: ${HUNCHO_DIR}/services/auth/proxy/build/Dockerfile
    restart: unless-stopped
    volumes:
      - ${HUNCHO_DIR}/statics/.:/usr/share/nginx/
    depends_on:
      - auth
    networks:
      - app-net
      - kong-net
  contest:
    container_name: contest
    build:
      context: ${HUNCHO_DIR}/services/contest
      dockerfile: ${HUNCHO_DIR}/services/contest/build/Dockerfile
    restart: on-failure
    volumes:
      - ${HUNCHO_DIR}/services/contest/migrations:/home/app/migrations
      - ${HUNCHO_DIR}/services/contest/bin:/home/app/bin
      - ${HUNCHO_DIR}/services/contest/tests:/home/app/tests
      - ${HUNCHO_DIR}/services/contest/seeds:/home/app/seeds
      - ${HUNCHO_DIR}/services/contest/src:/home/app/src
      - ${HUNCHO_DIR}/services/contest/statics:/home/app/statics
      - ${HUNCHO_DIR}/services/contest/manage.py:/home/app/manage.py
      - ${HUNCHO_DIR}/services/contest/setup.py:/home/app/setup.py
    env_file:
      - ${HUNCHO_DIR}/env/dev/.env.contest
    healthcheck:
      test: curl --fail -s contest:5000/ping || exit 1
      interval: 60s
      timeout: 5s
      retries: 5
    depends_on:
#      - contest_cache
      - contest_db
    networks:
      - app-net
      - kong-net
#  contest_cache:
#    container_name: contest_cache
#    build:
#      context: ${HUNCHO_DIR}/services/redis
#      dockerfile: ${HUNCHO_DIR}/services/redis/build/Dockerfile
#    restart: unless-stopped
#    volumes:
#      - ${HUNCHO_DIR}/data/dev/contest_cache/redis_data:/var/lib/redis
#      - ${HUNCHO_DIR}/data/dev/contest_cache/redis.conf:/usr/local/etc/redis/redis.conf
#    env_file:
#      - ${HUNCHO_DIR}/env/dev/.env.contest_cache
#    healthcheck:
#      test: ["CMD", "redis-cli","ping"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#    networks:
#      - app-net
  contest_db:
    container_name: contest_db
    build:
      context: ${HUNCHO_DIR}/services/postgresql
      dockerfile: ${HUNCHO_DIR}/services/postgresql/build/Dockerfile
      args:
        POSTGRES_VERSION: $POSTGRES_VERSION
    volumes:
      - ${HUNCHO_DIR}/data/dev/contest_db/data:/var/lib/postgresql/data/
    env_file:
      - ${HUNCHO_DIR}/env/dev/.env.contest_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U contest"]
      interval: 10s
      timeout: 5s
      retries: 20
    networks:
      - app-net
#  contest_proxy:
#    container_name: contest_proxy
#    build:
#      context: ${HUNCHO_DIR}/services/contest/proxy
#      dockerfile: ${HUNCHO_DIR}/services/contest/proxy/build/Dockerfile
#    restart: on-failure
#    volumes:
#      - ${HUNCHO_DIR}/services/contest/statics/.:/usr/share/nginx/
#    depends_on:
#      - contest
#    networks:
#      - app-net
#  elasticsearch:
#    container_name: elasticsearch
#    build:
#      context: ${HUNCHO_DIR}/services/elasticsearch
#      dockerfile: ${HUNCHO_DIR}/services/elasticsearch/build/Dockerfile
#      args:
#        ELK_VERSION: $ELK_VERSION
#    volumes:
#      - ${HUNCHO_DIR}/services/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro
#      - ${HUNCHO_DIR}/data/dev/elasticsearch/data:/usr/share/elasticsearch/data
#    ports:
#      - 9200:9200
#      - 9300:9300
#    env_file:
#      - ${HUNCHO_DIR}/env/dev/.env.elasticsearch
#  golftapir:
#    container_name: golftapir
#    build:
#      context: ${HUNCHO_DIR}/services/golftapir/proxy
#      dockerfile: ${HUNCHO_DIR}/services/golftapir/proxy/build/Dockerfile
#    restart: unless-stopped
#    volumes:
#      - ${HUNCHO_DIR}/services/golftapir/dist/.:/usr/share/nginx/dist
#      - ${HUNCHO_DIR}/services/golftapir/public/.:/usr/share/nginx/public
#    networks:
#      - app-net
#      - kong-net
#  kibana:
#    container_name: kibana
#    build:
#      context: ${HUNCHO_DIR}/services/kibana
#      dockerfile: ${HUNCHO_DIR}/services/kibana/build/Dockerfile
#      args:
#        ELK_VERSION: $ELK_VERSION
#    volumes:
#      - ${HUNCHO_DIR}/services/kibana/config/kibana.secret.yml:/usr/share/kibana/config/kibana.yml:ro
#    env_file:
#      - ${HUNCHO_DIR}/env/dev/.env.kibana
#    depends_on:
#      - elasticsearch
  kong:
    container_name: kong
    build:
      context: ${HUNCHO_DIR}/services/kong
      dockerfile: ${HUNCHO_DIR}/services/kong/build/Dockerfile
    restart: on-failure
    env_file:
      - ${HUNCHO_DIR}/env/dev/.env.kong
    ports:
      - 7000:8000
      - 8001:8001
      - 8443:8443
      - 8444:8444
    depends_on:
      - kong_db
    networks:
      - kong-net
  kong_db:
    container_name: kong_db
    build:
      context: ${HUNCHO_DIR}/services/postgresql
      dockerfile: ${HUNCHO_DIR}/services/postgresql/build/Dockerfile
      args:
        POSTGRES_VERSION: $POSTGRES_VERSION
    volumes:
      - ${HUNCHO_DIR}/data/dev/kong_db/data:/var/lib/postgresql/data
    env_file:
      - ${HUNCHO_DIR}/env/dev/.env.kong_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 20
    networks:
      - kong-net
  konga:
    container_name: konga
    build:
      context: ${HUNCHO_DIR}/services/konga
      dockerfile: ${HUNCHO_DIR}/services/konga/build/Dockerfile
    restart: on-failure
    env_file:
      - ${HUNCHO_DIR}/env/dev/.env.konga
    depends_on:
      - kong_db
    networks:
      - kong-net
#  logstash:
#    container_name: logstash
#    build:
#      context: ${HUNCHO_DIR}/services/logstash
#      dockerfile: ${HUNCHO_DIR}/services/logstash/build/Dockerfile
#      args:
#        ELK_VERSION: $ELK_VERSION
#    volumes:
#      - ${HUNCHO_DIR}/services/logstash/config/logstash.secret.yml:/usr/share/logstash/config/logstash.yml
#      - ${HUNCHO_DIR}/services/logstash/pipeline/logstash.secret.conf:/usr/share/logstash/pipeline/logstash.conf
#    ports:
#      - 5000:5000/tcp
#      - 5000:5000/udp
#      - 9600:9600
#    env_file:
#      - ${HUNCHO_DIR}/env/dev/.env.logstash
#    depends_on:
#      - elasticsearch
#  notification:
#    container_name: notification
#    build:
#      context: ${HUNCHO_DIR}/services/notification
#      dockerfile: ${HUNCHO_DIR}/services/notification/build/Dockerfile
#      args:
#          NODE_VERSION: 12
#    volumes:
#      - ${HUNCHO_DIR}/services/notification/src:/home/app/src
#    env_file:
#      - ${HUNCHO_DIR}/env/dev/.env.notification
#    networks:
#      - app-net
#      - kong-net
#  notification_cache:
#    container_name: notification_cache
#    build:
#      context: ${HUNCHO_DIR}/services/redis
#      dockerfile: ${HUNCHO_DIR}/services/redis/build/Dockerfile
#    volumes:
#      - ${HUNCHO_DIR}/data/dev/notification_cache/redis_data:/var/lib/redis
#      - ${HUNCHO_DIR}/data/dev/notification_cache/redis.conf:/usr/local/etc/redis/redis.conf
#    env_file:
#      - ${HUNCHO_DIR}/env/dev/.env.notification_cache
#    networks:
#      - app-net
#  notification_mongodb:
#    container_name: notification_mongodb
#    build:
#      context: ${HUNCHO_DIR}/services/mongodb
#      dockerfile: ${HUNCHO_DIR}/services/mongodb/build/Dockerfile
#      args:
#        MONGO_VERSION: 3.6
#    volumes:
#      - ${HUNCHO_DIR}/data/dev/notification_mongodb/data:/data/db
#      - ${HUNCHO_DIR}/services/notification/bin/init-mongo.sh:/docker-entrypoint-initdb.d/init-mongo.sh
#    env_file:
#      - ${HUNCHO_DIR}/env/dev/.env.notification_mongodb
#    networks:
#      - app-net
#  mailer:
#    container_name: mailer
#    build:
#      context: ${HUNCHO_DIR}/services/mailer
#      dockerfile: ${HUNCHO_DIR}/services/mailer/build/Dockerfile
#    restart: always
#    volumes:
#      - ${HUNCHO_DIR}/services/mailer/public:/home/app/public
#      - ${HUNCHO_DIR}/services/mailer/src:/home/app/src
#      - ${HUNCHO_DIR}/services/mailer/manage.php:/home/app/manage.php
#      - mailer_volume:/home/app
#    env_file:
#      - ${HUNCHO_DIR}/env/dev/.env.mailer
#      - ${HUNCHO_DIR}/secrets/mailer/mailer_password.txt
#  mailer_web:
#    container_name: mailer_web
#    build:
#      context: ${HUNCHO_DIR}/services/mailer/web
#      dockerfile: ${HUNCHO_DIR}/services/mailer/web/build/Dockerfile
#    restart: always
#    volumes:
#      - mailer_volume:/var/www/html
#    depends_on:
#      - mailer
#  score:
#    container_name: score
#    build:
#      context: ${HUNCHO_DIR}/services/score
#      dockerfile: ${HUNCHO_DIR}/services/score/build/Dockerfile
#    restart: on-failure
#    volumes:
#      - ${HUNCHO_DIR}/services/score/migrations:/home/app/migrations
#      - ${HUNCHO_DIR}/services/score/bin:/home/app/bin
#      - ${HUNCHO_DIR}/services/score/tests:/home/app/tests
#      - ${HUNCHO_DIR}/services/score/seeds:/home/app/seeds
#      - ${HUNCHO_DIR}/services/score/src:/home/app/src
#      - ${HUNCHO_DIR}/services/score/statics:/home/app/statics
#      - ${HUNCHO_DIR}/services/score/manage.py:/home/app/manage.py
#      - ${HUNCHO_DIR}/services/score/setup.py:/home/app/setup.py
#    env_file:
#      - ${HUNCHO_DIR}/env/dev/.env.score
#    healthcheck:
#      test: curl --fail -s score:5000/ping || exit 1
#      interval: 60s
#      timeout: 5s
#      retries: 5
#    depends_on:
#      - score_cache
#  score_cache:
#    container_name: score_cache
#    build:
#      context: ${HUNCHO_DIR}/services/redis
#      dockerfile: ${HUNCHO_DIR}/services/redis/build/Dockerfile
#    restart: unless-stopped
#    volumes:
#      - ${HUNCHO_DIR}/data/dev/score_cache/redis_data:/var/lib/redis
#      - ${HUNCHO_DIR}/data/dev/score_cache/redis.conf:/usr/local/etc/redis/redis.conf
#    env_file:
#      - ${HUNCHO_DIR}/env/dev/.env.score_cache
#    healthcheck:
#      test: ["CMD", "redis-cli","ping"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#  score_mongodb:
#    container_name: score_mongodb
#    build:
#      context: ${HUNCHO_DIR}/services/mongodb
#      dockerfile: ${HUNCHO_DIR}/services/mongodb/build/Dockerfile
#      args:
#        MONGO_VERSION: 3.6
#    volumes:
#      - ${HUNCHO_DIR}/data/dev/score_mongodb/data:/data/db
#      - ${HUNCHO_DIR}/services/score/bin/init-mongo.sh:/docker-entrypoint-initdb.d/init-mongo.sh
#    env_file:
#      - ${HUNCHO_DIR}/env/dev/.env.score_mongodb
#  score_proxy:
#    container_name: score_proxy
#    build:
#      context: ${HUNCHO_DIR}/services/score/proxy
#      dockerfile: ${HUNCHO_DIR}/services/score/proxy/build/Dockerfile
#    restart: on-failure
#    volumes:
#      - ${HUNCHO_DIR}/services/score/statics/.:/usr/share/nginx/
#    depends_on:
#      - score
  sport:
    container_name: sport
    build:
      context: ${HUNCHO_DIR}/services/sport
      dockerfile: ${HUNCHO_DIR}/services/sport/build/Dockerfile
    restart: on-failure
    volumes:
      - ${HUNCHO_DIR}/services/sport/migrations:/home/app/migrations
      - ${HUNCHO_DIR}/services/sport/bin:/home/app/bin
      - ${HUNCHO_DIR}/services/sport/tests:/home/app/tests
      - ${HUNCHO_DIR}/services/sport/seeds:/home/app/seeds
      - ${HUNCHO_DIR}/services/sport/src:/home/app/src
      - ${HUNCHO_DIR}/services/sport/statics:/home/app/statics
      - ${HUNCHO_DIR}/services/sport/manage.py:/home/app/manage.py
      - ${HUNCHO_DIR}/services/sport/setup.py:/home/app/setup.py
    env_file:
      - ${HUNCHO_DIR}/env/dev/.env.sport
    healthcheck:
      test: curl --fail -s sport:5000/ping || exit 1
      interval: 60s
      timeout: 5s
      retries: 5
    depends_on:
#      - sport_cache
      - sport_db
    networks:
      - app-net
      - kong-net
#  sport_cache:
#    container_name: sport_cache
#    build:
#      context: ${HUNCHO_DIR}/services/redis
#      dockerfile: ${HUNCHO_DIR}/services/redis/build/Dockerfile
#    restart: unless-stopped
#    volumes:
#      - ${HUNCHO_DIR}/data/dev/sport_cache/redis_data:/var/lib/redis
#      - ${HUNCHO_DIR}/data/dev/sport_cache/redis.conf:/usr/local/etc/redis/redis.conf
#    env_file:
#      - ${HUNCHO_DIR}/env/dev/.env.sport_cache
#    healthcheck:
#      test: ["CMD", "redis-cli","ping"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#    networks:
#      - app-net
  sport_db:
    container_name: sport_db
    build:
      context: ${HUNCHO_DIR}/services/postgresql
      dockerfile: ${HUNCHO_DIR}/services/postgresql/build/Dockerfile
      args:
        POSTGRES_VERSION: 9.6
    volumes:
      - ${HUNCHO_DIR}/data/dev/sport_db/data:/var/lib/postgresql/data/
    env_file:
      - ${HUNCHO_DIR}/env/dev/.env.sport_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U sport"]
      interval: 10s
      timeout: 5s
      retries: 20
    networks:
      - app-net
#  sport_proxy:
#    container_name: sport_proxy
#    build:
#      context: ${HUNCHO_DIR}/services/sport/proxy
#      dockerfile: ${HUNCHO_DIR}/services/sport/proxy/build/Dockerfile
#    restart: on-failure
#    volumes:
#      - ${HUNCHO_DIR}/services/sport/statics/.:/usr/share/nginx/
#    depends_on:
#      - sport
#    networks:
#      - app-net
  wager:
    container_name: wager
    build:
      context: ${HUNCHO_DIR}/services/wager
      dockerfile: ${HUNCHO_DIR}/services/wager/build/Dockerfile
    restart: on-failure
    volumes:
      - ${HUNCHO_DIR}/services/wager/migrations:/home/app/migrations
      - ${HUNCHO_DIR}/services/wager/bin:/home/app/bin
      - ${HUNCHO_DIR}/services/wager/tests:/home/app/tests
      - ${HUNCHO_DIR}/services/wager/seeds:/home/app/seeds
      - ${HUNCHO_DIR}/services/wager/src:/home/app/src
      - ${HUNCHO_DIR}/services/wager/statics:/home/app/statics
      - ${HUNCHO_DIR}/services/wager/manage.py:/home/app/manage.py
      - ${HUNCHO_DIR}/services/wager/setup.py:/home/app/setup.py
    env_file:
      - ${HUNCHO_DIR}/env/dev/.env.wager
    healthcheck:
      test: curl --fail -s wager:5000/ping || exit 1
      interval: 60s
      timeout: 5s
      retries: 5
    depends_on:
#      - wager_cache
      - wager_db
    networks:
      - app-net
      - kong-net
#  wager_cache:
#    container_name: wager_cache
#    build:
#      context: ${HUNCHO_DIR}/services/redis
#      dockerfile: ${HUNCHO_DIR}/services/redis/build/Dockerfile
#    restart: unless-stopped
#    volumes:
#      - ${HUNCHO_DIR}/data/dev/wager_cache/redis_data:/var/lib/redis
#      - ${HUNCHO_DIR}/data/dev/wager_cache/redis.conf:/usr/local/etc/redis/redis.conf
#    env_file:
#      - ${HUNCHO_DIR}/env/dev/.env.wager_cache
#    healthcheck:
#      test: ["CMD", "redis-cli","ping"]
#      interval: 30s
#      timeout: 10s
#      retries: 5
#    networks:
#      - app-net
  wager_db:
    container_name: wager_db
    build:
      context: ${HUNCHO_DIR}/services/postgresql
      dockerfile: ${HUNCHO_DIR}/services/postgresql/build/Dockerfile
      args:
        POSTGRES_VERSION: $POSTGRES_VERSION
    volumes:
      - ${HUNCHO_DIR}/data/dev/wager_db/data:/var/lib/postgresql/data/
    env_file:
      - ${HUNCHO_DIR}/env/dev/.env.wager_db
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U wager"]
      interval: 10s
      timeout: 5s
      retries: 20
    networks:
      - app-net
#  wager_proxy:
#    container_name: wager_proxy
#    build:
#      context: ${HUNCHO_DIR}/services/wager/proxy
#      dockerfile: ${HUNCHO_DIR}/services/wager/proxy/build/Dockerfile
#    restart: on-failure
#    volumes:
#      - ${HUNCHO_DIR}/services/wager/statics/.:/usr/share/nginx/
#    depends_on:
#      - wager
#    networks:
#      - app-net
#  web_pusher:
#    container_name: web_pusher
#    build:
#      context: ${HUNCHO_DIR}/services/web-pusher
#      dockerfile: ${HUNCHO_DIR}/services/web-pusher/build/Dockerfile
#      args:
#        NODE_VERSION: 12
#    volumes:
#      - ${HUNCHO_DIR}/services/web-pusher/src:/home/app/src
#      - ${HUNCHO_DIR}/secrets/golftapir/tech-tapir-firebase-adminsdk-3zrlh-3720b4d899.json:/home/app/secrets/firebase.json
#    env_file:
#      - ${HUNCHO_DIR}/env/dev/.env.web-pusher
#    networks:
#      - app-net
#volumes:
#  mailer_volume:
networks:
  app-net:
    driver: bridge
  kong-net:
    driver: bridge